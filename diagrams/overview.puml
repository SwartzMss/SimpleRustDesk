@startuml
actor 用户

participant "DeskServer" as DS
participant "DeskControl" as DC
participant "IDServer" as IDS
participant "RelayServer" as RS

group 注册阶段（自动执行）
DS -> IDS: RegisterPeer { uuid }
note over DS : uuid 为 DeskServer 自生成的唯一标识
IDS -> DS: RegisterPeerResponse { result }\n(result: OK / SERVER_ERROR)
note over IDS: 同时记录 DeskServer 的 IP 和 UUID

DS -> RS: UDP Heartbeat { }
RS -> DS: UDP Heartbeat (reply)
note over DS: 收到回复则认为双方在线
end group

group 连接阶段
note over DC: 用户操作 DeskControl\n输入目标 DeskServer 的 UUID
用户 -> DC: 输入目标 UUID
note over DC: id 为本次连接的内部标识
DC -> IDS: PunchHoleRequest { uuid, id }


alt 若 UUID 不存在或目标离线
    IDS -> DC: PunchHoleResponse { result = ID_NOT_EXIST / OFFLINE,\nrelay_server:"", relay_port:0 }
else 若 UUID 存在且在线
    IDS -> DS: PunchHole { id }
    note over DS: 检查 RelayServer 状态\n并返回 Relay 信息
    DS -> IDS: PunchHoleSent { relay_server, relay_port, result = OK, id }

    IDS -> DC: PunchHoleResponse { relay_server, relay_port, result = OK }
end

DC -> RS: RequestRelay { uuid }
DS -> RS: RequestRelay { uuid }
note over RS: 根据 uuid 匹配 DeskServer 与 DeskControl\n建立数据转发通道
RS <- DS: 数据发送
RS -> DC: 数据接收

end group
@enduml
