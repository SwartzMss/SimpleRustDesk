name: Build and Release

on:
  push:
    tags:
      - 'v*'   # 当推送以 v 开头的 tag 时触发

env:
  SOLUTION_FILE_PATH: SimpleRustDesk.sln

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install aqt
        run: pip install aqtinstall

      - name: Install Qt6
        run: |
          aqt install-qt windows desktop 6.8.2 win64_msvc2022_64 -m all --outputdir "C:\Qt"
          echo "Qt6_DIR=C:\\Qt\\6.8.2\\msvc2022_64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Prepare QtMsBuild folder
        run: |
          New-Item -ItemType Directory -Path "$Env:LOCALAPPDATA\QtMsBuild" -Force | Out-Null
          Copy-Item -Path "$Env:GITHUB_WORKSPACE\QtMsBuild\*" `
                    -Destination "$Env:LOCALAPPDATA\QtMsBuild\" `
                    -Recurse -Force
          echo "QtMsBuild=$Env:LOCALAPPDATA\QtMsBuild" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Check qmake
        run: dir C:\Qt\6.8.2\msvc2022_64\bin

      - name: Setup MSBuild (VS2022)
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build Solution
        run: msbuild SimpleRustDesk.sln /m /p:Configuration=Release /p:Platform=x64 /p:QtInstallation="Qt_6_8_2" /p:QtInstallDir="C:\Qt\6.8.2\msvc2022_64"

      # 以下为打包步骤，将各个包的 exe 与依赖直接复制到同一目录，并生成各自的 zip 文件
      - name: Create IDServer Zip
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path packages\IDServer
          Copy-Item x64\Release\IDServer.exe -Destination packages\IDServer\
          Copy-Item -Recurse Depend\QtDll\* -Destination packages\IDServer\
          Copy-Item -Recurse Depend\protobuf\lib\*.dll -Destination packages\IDServer\
          Copy-Item -Recurse Depend\sqlite3\lib\*.dll -Destination packages\IDServer\
          Compress-Archive -Path packages\IDServer\* -DestinationPath packages\IDServer.zip

      - name: Create RelayServer Zip
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path packages\RelayServer
          Copy-Item x64\Release\RelayServer.exe -Destination packages\RelayServer\
          Copy-Item -Recurse Depend\QtDll\* -Destination packages\RelayServer\
          Copy-Item -Recurse Depend\protobuf\lib\*.dll -Destination packages\RelayServer\
          Compress-Archive -Path packages\RelayServer\* -DestinationPath packages\RelayServer.zip

      - name: Create DeskControler Zip
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path packages\DeskControler
          Copy-Item x64\Release\DeskControler.exe -Destination packages\DeskControler\
          Copy-Item -Recurse Depend\QtDll\* -Destination packages\DeskControler
          Copy-Item -Recurse Depend\protobuf\lib\*.dll -Destination packages\DeskControler
          Copy-Item -Recurse Depend\ffmpeg\lib\*.dll -Destination packages\DeskControler
          Compress-Archive -Path packages\DeskControler\* -DestinationPath packages\DeskControler.zip

      - name: Create DeskServer Zip
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path packages\DeskServer
          Copy-Item x64\Release\DeskServer.exe -Destination packages\DeskServer\
          Copy-Item -Recurse Depend\QtDll\* -Destination packages\DeskServer
          Copy-Item -Recurse Depend\protobuf\lib\*.dll -Destination packages\DeskServer
          Copy-Item -Recurse Depend\ffmpeg\lib\*.dll -Destination packages\DeskServer
          Compress-Archive -Path packages\DeskServer\* -DestinationPath packages\DeskServer.zip

      - name: Create Final Package Zip
        shell: powershell
        run: |
          Compress-Archive -Path packages\IDServer.zip,packages\RelayServer.zip,packages\DeskControler.zip,packages\DeskServer.zip -DestinationPath packages\FinalPackage.zip

      # 以下步骤获取已存在的 Release 的 upload_url，并上传打包好的压缩包作为新资产
      - name: Get existing Release upload URL
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref_name
            });
            return release.data.upload_url;
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.result }}
          asset_path: packages\FinalPackage.zip
          asset_name: FinalPackage.zip
          asset_content_type: application/zip
